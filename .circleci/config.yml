version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3
  

x-data:
  go_versions: &go_versions
    - '1.20'

workflows:
  main:
    jobs:
      - lint:
          matrix:
            parameters:
              go_version: *go_versions
      - test:
          name: test-<< matrix.go_version >>
          matrix:
            parameters:
              go_version: *go_versions

jobs:

  lint:
    parameters:
      go_version:
        type: string
    docker:
      - image: cimg/go:<<parameters.go_version>>
    resource_class: large
    environment:
      GOMAXPROCS: 4
    steps:
      - checkout
      - setup
      - run:
          name: Check rootcerts is up to date
          command: ./do check-rootcerts
      - run:
          name: Verify modules are tidy
          command: ./do check-gomod
      - run:
          name: Lint
          command: ./do lint-report
      - cleanup

  test:
    parameters:
      go_version:
        type: string
    docker:
      - image: cimg/go:<<parameters.go_version>>
      - image: circleci/postgres:13.3-ram
        environment:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dbname
      - image: cimg/redis:7.0
        command: [
          "redis-server",
          "--protected-mode", "no",
          "--databases", "1000000",
        ]
      - image: rabbitmq:3.8-management-alpine
      - image: mongo:4.2
        environment:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: dbname
      - image: minio/minio
        environment:
          MINIO_ROOT_USER: 'minio'
          MINIO_ROOT_PASSWORD: 'minio123'
        command: [
          'server',
          '/data/1','/data/2','/data/3','/data/4',
          '--address', ':9123',
        ]
      - image: minio/minio
        environment:
          MINIO_ROOT_USER: 'minio-nv'
          MINIO_ROOT_PASSWORD: 'minio-nv-123'
        command: [
          'server',
          '/datanv',
          '--address', ':9124',
        ]
    resource_class: large
    parallelism: 6
    environment:
      GOMAXPROCS: 4
    steps:
      - checkout
      - setup
      - run:
          name: Run tests
          shell: /bin/bash
          command: |
            set -e
            cd /home/circleci/project
            PACKAGES="$(go list ./... | circleci tests split --split-by=timings)"
            export NAMES=$(echo $PACKAGES | tr -d '\n')
            echo "Testing:"
            echo $NAMES
            gotestsum --junitfile="test-reports/junit.xml" -- -covermode=count -coverprofile=test-reports/coverage.out -p 1 $NAMES
      - codecov/upload    
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          

commands:
  setup:
    steps:
      - run:
          name: Download dependencies
          command: go mod download && (cd tools && go mod download)
      - run:
          name: Adding GOPATH bin to PATH
          command: echo 'export PATH="$PATH:$(go env GOPATH)/bin"' >> "$BASH_ENV"
      - run:
          name: Install devtools
          command: ./do install-devtools
      - run:
          name: install protobuf binaries
          command: |
            mkdir -p /tmp/protoc
            cd /tmp/protoc

            wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
            unzip protoc*.zip
            sudo mv bin/protoc /usr/local/bin/
            sudo mv include/google /usr/local/include
      - run:
          name: Make test-reports dir
          command: mkdir -p test-reports

  cleanup:
    steps:
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports

